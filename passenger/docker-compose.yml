version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:8.2.0
    container_name: transport-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - transport-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka (KRaft mode)
  kafka:
    image: apache/kafka:latest
    container_name: transport-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: 'transport-ticketing-cluster'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - transport-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 10s
      timeout: 5s
      retries: 5

  # Passenger Backend Service
  passenger-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: passenger-backend
    ports:
      - "9091:9091"
    environment:
      - passenger_service.port=9091
      - passenger_service.host=0.0.0.0
      - mongodb.host=mongodb
      - mongodb.port=27017
      - mongodb.database=transport_ticketing_system
      - kafka.bootstrapServers=kafka:9092
      - kafka.passengerEventsTopic=passenger-events
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - transport-network
    restart: unless-stopped

  # Passenger Frontend Service
  passenger-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: passenger-frontend
    ports:
      - "8080:80"
    depends_on:
      - passenger-backend
    networks:
      - transport-network
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  kafka_data:
    driver: local

networks:
  transport-network:
    driver: bridge